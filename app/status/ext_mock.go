// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package status

import (
	"sync"

	"github.com/umputun/sys-agent/app/status/external"
)

// ExtServicesMock is a mock implementation of ExtServices.
//
// 	func TestSomethingThatUsesExtServices(t *testing.T) {
//
// 		// make and configure a mocked ExtServices
// 		mockedExtServices := &ExtServicesMock{
// 			StatusFunc: func() []external.Response {
// 				panic("mock out the Status method")
// 			},
// 		}
//
// 		// use mockedExtServices in code that requires ExtServices
// 		// and then make assertions.
//
// 	}
type ExtServicesMock struct {
	// StatusFunc mocks the Status method.
	StatusFunc func() []external.Response

	// calls tracks calls to the methods.
	calls struct {
		// Status holds details about calls to the Status method.
		Status []struct {
		}
	}
	lockStatus sync.RWMutex
}

// Status calls StatusFunc.
func (mock *ExtServicesMock) Status() []external.Response {
	if mock.StatusFunc == nil {
		panic("ExtServicesMock.StatusFunc: method is nil but ExtServices.Status was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStatus.Lock()
	mock.calls.Status = append(mock.calls.Status, callInfo)
	mock.lockStatus.Unlock()
	return mock.StatusFunc()
}

// StatusCalls gets all the calls that were made to Status.
// Check the length with:
//     len(mockedExtServices.StatusCalls())
func (mock *ExtServicesMock) StatusCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStatus.RLock()
	calls = mock.calls.Status
	mock.lockStatus.RUnlock()
	return calls
}
